@page "/additem"
@attribute [Authorize(Policy ="AdminOnly")]

@inject NavigationManager NavigationManager
@inject IAddItemUseCase AddItemUseCase
@inject IViewCategoriesUseCase ViewCategoriesUseCase

<h3>Add Item</h3>
<br />
@if (Item != null)
{
<EditForm Model="Item" OnValidSubmit="OnValidSumit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="Item.Name" class="form-control"></InputText>
    </div>

    <div class="form-group">
        <label for="category">Category</label>
        <select id="category" @bind="Item.CategoryId" class="form-control">
            <option selected></option>
            @foreach (var cat in categories)
            {
                <option value="@cat.CategoryId">@cat.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="Item.Price" @bind-Value:format="F2" class="form-control"></InputNumber>
    </div>

    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="Item.Quantity" class="form-control"></InputNumber>
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
</EditForm>

}


@code {

    private Item Item;
    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Item = new Item();
        categories = ViewCategoriesUseCase.Execute();
    }

    private void OnValidSumit()
    {
        AddItemUseCase.Execute(Item);
        NavigationManager.NavigateTo("/Items");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/Items");
    }

}
