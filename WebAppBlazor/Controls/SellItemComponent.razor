@inject IGetItemByIdUseCase GetItemByIdUseCase
@inject ISellItemUseCase SellItemUseCase

@if (ItemToSell != null)
{
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="ItemToSell" OnValidSubmit="SellItem">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Item Name</label>
            <input class="form-control" id="name" type="text" readonly value="@ItemToSell.Name" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input class="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}", ItemToSell.Price))" />
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="@ItemToSell.Quantity" class="form-control"></InputNumber>
        </div>
        <button type="submit" class="btn btn-primary">Sell</button>
    </EditForm>


}

@code {
    private Item ItemToSell;
    private string errorMessage;

    [Parameter]
    public string CashierName { get; set; }

    [Parameter]
    public Item SelectedItem { get; set; }

    [Parameter]
    public EventCallback<Item> OnItemSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (SelectedItem != null)
        {
            ItemToSell = new Item
            {
                ItemId = SelectedItem.ItemId,
                Name = SelectedItem.Name,
                CategoryId = SelectedItem.CategoryId,
                Price = SelectedItem.Price,
                Quantity = 0
            };
        }
        else
        {
            ItemToSell = null;
        }
    }

    private void SellItem()
    {
        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "The Cashier's name is missing.";
            return;
        }

        var Item = GetItemByIdUseCase.Execute(ItemToSell.ItemId);
        if (ItemToSell.Quantity <= 0)
        {
            errorMessage = "The quanity has to be greater than zero.";
        }
        else if (Item.Quantity >= ItemToSell.Quantity)
        {
            OnItemSold.InvokeAsync(ItemToSell);
            errorMessage = string.Empty;
            SellItemUseCase.Execute(CashierName, ItemToSell.ItemId, ItemToSell.Quantity.Value);
        }
        else
        {
            errorMessage = $"{Item.Name} only has {Item.Quantity} left. It is not enough.";
        }
    }

}
